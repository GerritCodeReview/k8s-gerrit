{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e4c0fe5d_575e57f2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2024-06-04T11:29:41Z",
      "side": 1,
      "message": "That actually has to be `bazel test --local_test_jobs\u003d1 --test_env KUBECONFIG\u003d\u003cPath to kubeconfig file\u003e operator:operator-tests-e2e`.\nI believe `--local_test_jobs\u003d1` should go to the .bazelrc. This is currently required, since some tests rely on the same resources and can\u0027t run in parallel. I will work on changing that.\nAlso the test.properties has to be filled in. This should be documented, especially since with bazel we can\u0027t configure a path to a custom file, but have to configure the resource file in place.",
      "range": {
        "startLine": 36,
        "startChar": 4,
        "endLine": 36,
        "endChar": 42
      },
      "revId": "63807a96fa7c73e7cd1f5740c494a7b9fc138631",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "656ef73b_810644da",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2024-06-07T13:49:02Z",
      "side": 1,
      "message": "\u003e I believe --local_test_jobs\u003d1 should go to the .bazelrc.\n\nA better approach would be to set the `exclusive` bit per target, see Bazel encyclopedia: [1].\n\nThat way some test target would ran exclusively, while the other would still run in parallel. Done.\n\n\n[1]: https://bazel.build/reference/test-encyclopedia#tag-conventions",
      "parentUuid": "e4c0fe5d_575e57f2",
      "range": {
        "startLine": 36,
        "startChar": 4,
        "endLine": 36,
        "endChar": 42
      },
      "revId": "63807a96fa7c73e7cd1f5740c494a7b9fc138631",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15dec9bf_321f7fa1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2024-07-26T08:18:25Z",
      "side": 1,
      "message": "I don\u0027t believe that would work, since that tag would just say that the executed rule should not run next to other rules, but the `operator-tests-e2e` rule runs all E2E tests and thus they would still be executed in parallel.\n\nI Believe the best way for now is to use a specific config for E2E tests that can be referenced when running the tests.",
      "parentUuid": "656ef73b_810644da",
      "range": {
        "startLine": 36,
        "startChar": 4,
        "endLine": 36,
        "endChar": 42
      },
      "revId": "63807a96fa7c73e7cd1f5740c494a7b9fc138631",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a7fe4d6_c62804f0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2024-08-15T04:15:09Z",
      "side": 1,
      "message": "\u003e I don\u0027t believe that would work, since that tag would just say that the executed rule should not run next to other rules, but the operator-tests-e2e rule runs all E2E tests and thus they would still be executed in parallel.\n\nYou could split the test execution for each E2E file in its own Bazel rule. That way `exclusive` tag would force that every rule would be executed exclusively and not in parallel.\n\nWe are doing it `gerrit` itself and in number of plugins, e.g. `replication` plugin, something like this should work (I haven\u0027t tested it):\n\n```\n[java_test_suite(\n    name \u003d f[:f.index(\".\")].replace(\"/\", \"_\"),\n    srcs \u003d [f],\n    size \u003d \"large\",\n    tag \u003d [\"exclusive\"],\n    resource_strip_prefix \u003d \"operator/src/test/resources\",\n    resources \u003d glob([\"src/test/resources/**\"]),\n    runner \u003d \"junit5\",\n    runtime_deps \u003d JUNIT5_DEPS,\n    deps \u003d [\n        [...]\n    ]\n) for f in glob([\"src/test/java/**/*E2E.java\"])]\n```",
      "parentUuid": "15dec9bf_321f7fa1",
      "range": {
        "startLine": 36,
        "startChar": 4,
        "endLine": 36,
        "endChar": 42
      },
      "revId": "63807a96fa7c73e7cd1f5740c494a7b9fc138631",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ec237ab_2ad3e30c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2024-06-04T11:29:41Z",
      "side": 1,
      "message": "That is actually not required ,but was a mistake of mine when setting up the tests in maven.",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 45
      },
      "revId": "63807a96fa7c73e7cd1f5740c494a7b9fc138631",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ea5ff2f_4eaf34c0",
        "filename": "Documentation/operator-dev.md",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2024-06-04T11:29:41Z",
      "side": 1,
      "message": "Should we directly mention bazelisk?",
      "range": {
        "startLine": 20,
        "startChar": 4,
        "endLine": 20,
        "endChar": 9
      },
      "revId": "63807a96fa7c73e7cd1f5740c494a7b9fc138631",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e5f02e9_19d238d2",
        "filename": "Documentation/operator-dev.md",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2024-07-26T08:18:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1ea5ff2f_4eaf34c0",
      "range": {
        "startLine": 20,
        "startChar": 4,
        "endLine": 20,
        "endChar": 9
      },
      "revId": "63807a96fa7c73e7cd1f5740c494a7b9fc138631",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a557ca3_ad4277cc",
        "filename": "Documentation/operator-dev.md",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2024-06-04T11:29:41Z",
      "side": 1,
      "message": "nit: trailing whitespaces",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 4
      },
      "revId": "63807a96fa7c73e7cd1f5740c494a7b9fc138631",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61c4e00f_dfd720c9",
        "filename": "Documentation/operator-dev.md",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2024-07-26T08:18:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a557ca3_ad4277cc",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 4
      },
      "revId": "63807a96fa7c73e7cd1f5740c494a7b9fc138631",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}