{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1d863bd9_b453c0e0",
        "filename": "operator/src/main/java/com/google/gerrit/k8s/operator/gerrit/config/GerritConfigBuilder.java",
        "patchSetId": 13
      },
      "lineNbr": 202,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2024-06-05T12:03:05Z",
      "side": 1,
      "message": "I guess that this should also be left to the user to optimize.",
      "range": {
        "startLine": 201,
        "startChar": 0,
        "endLine": 202,
        "endChar": 96
      },
      "revId": "c4b65df0d9e13bd16026d686ae8def12ff805ab1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c22a2fcb_0a44e5a8",
        "filename": "operator/src/main/java/com/google/gerrit/k8s/operator/gerrit/config/GerritConfigBuilder.java",
        "patchSetId": 13
      },
      "lineNbr": 202,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2024-06-05T12:47:56Z",
      "side": 1,
      "message": "According with the `events-kafka` documentation [1] there are 2 types of properties that can be defined, those that belong to the plugin itself. And those that are passed down to configure Kafka consumers [2] and producers [3].\n\n- for the first group we could use the defaults values (we defined them explicitly for transparency). This change will provide just `sendStreamEvents` to `true`.\n\n- for the second group maybe makes sense to *update the model* and allow the user to define them in the CR, i.e `autoCommitIntervalMs`, `securityProtocol`, `enableAutoCommit` and `autoOffsetReset`.\n\nI will address it.\n\n\nReferences:\n[1] https://gerrit.googlesource.com/plugins/events-kafka/+/refs/heads/stable-3.9/src/main/resources/Documentation/config.md\n[2] https://docs.confluent.io/platform/current/clients/consumer.html\n[3] https://docs.confluent.io/platform/current/clients/producer.html",
      "parentUuid": "1d863bd9_b453c0e0",
      "range": {
        "startLine": 201,
        "startChar": 0,
        "endLine": 202,
        "endChar": 96
      },
      "revId": "c4b65df0d9e13bd16026d686ae8def12ff805ab1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5368e5ce_8b607309",
        "filename": "operator/src/main/java/com/google/gerrit/k8s/operator/gerrit/config/GerritConfigBuilder.java",
        "patchSetId": 13
      },
      "lineNbr": 202,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2024-06-09T19:42:33Z",
      "side": 1,
      "message": "@thomas.draebing@sap.com I have modelled the events broker in this way:\n```\n  eventsBroker:\n    brokerType: KAFKA\n    eventsKafkaConfig:\n      kafkaProperties:\n          bootstrapServers: \"kafka-service.kafka-zk.svc.cluster.local:9092\"\n          securityProtocol: \"PLAINTEXT\"\n          enableAutoCommit: \"true\"\n          autoCommitIntervalMs: \"1000\"\n          autoOffsetReset: \"latest\"\n      pluginProperties:\n          sendStreamEvents: \"true\"\n```\n\nIn this way we encode the entire plugin configuration in the CR. `kafkaProperties` and `pluginProperties` are serialised into Map\u003cString, String\u003e for simplicity.\n\nIf you are happy with this approach I can rebase this in the chain of changes. (although not all the comments have been addressed) and in this way those changes can be adapted. \n\nNote: I think multisite plugin should be modelled in similar way.",
      "parentUuid": "c22a2fcb_0a44e5a8",
      "range": {
        "startLine": 201,
        "startChar": 0,
        "endLine": 202,
        "endChar": 96
      },
      "revId": "c4b65df0d9e13bd16026d686ae8def12ff805ab1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f0f3775_155d8122",
        "filename": "operator/src/main/java/com/google/gerrit/k8s/operator/gerrit/config/GerritConfigBuilder.java",
        "patchSetId": 13
      },
      "lineNbr": 202,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2024-06-10T07:06:20Z",
      "side": 1,
      "message": "Thanks for putting that much thought into it!\n\nI am not sure about modelling the whole configuration in yaml. I have thought about it in the past for the gerrit.config, but decided not to go that route. The two main reasons are:\n- Double maintenance: we would have to maintain changes in the plugin configuration here as well. That is quite some work and would always bump the CRD version. This will likely not be necessary, if you use `Map\u003cString, String\u003e` at the cost of having less validation, which takes away a lot of the advantage it would have to use yaml.\n- Also users are used to the git config format and the documentation of Gerrit and its plugins use it. Changing the format makes it slightly more difficult for users to configure the plugin.\n\nThe strategy currently used is thus to only move values to yaml that are also used outside of the Gerrit config or are very central for the GerritCluster, i.e. it is related to a component that is itself a component of the GerritCluster, like the database for the global RefDB.\n\nI would suggest the following:\n- Configure the bootstrapServers via yaml (we can let the operator create Istio ServiceEntries for it to make it part of the ServiceMesh)\n- If the other options should always be cluster-wide configurations, add a field to add the config as a String in git config format (similar as gerrit.config).\n- Handle some options whose value is determined by the setup using `RequiredOption`, e.g. if multisite is being used enforce `sendStreamEvents` to be `false`\n\nTo be clear, I am open for arguments against this approach and using yaml, since I also like the yaml format better and would like to have a single format for all configuration. We should however have a single approach in that regard and maybe find a set of rules to write down in the developer guide. We can also have a call to have this discussion.",
      "parentUuid": "5368e5ce_8b607309",
      "range": {
        "startLine": 201,
        "startChar": 0,
        "endLine": 202,
        "endChar": 96
      },
      "revId": "c4b65df0d9e13bd16026d686ae8def12ff805ab1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e8665fa_d1f1101d",
        "filename": "operator/src/main/java/com/google/gerrit/k8s/operator/gerrit/config/GerritConfigBuilder.java",
        "patchSetId": 13
      },
      "lineNbr": 202,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2024-06-10T16:55:12Z",
      "side": 1,
      "message": "You made valid points. \n\nWould it work for you (for this change, multisite will change slightly):\n- We encode the bootstrapServers in GerritCluster CR in this way:\n```\n  eventsBroker:\n    brokerType: KAFKA\n    kafkaConfig:\n      connectString: kafka-service.kafka-zk.svc.cluster.local:9092\n```\n- The gerrit.config section would contain:\n```\n            [plugin \"events-kafka\"]\n              securityProtocol \u003d PLAINTEXT\n              pollingIntervalMs \u003d 1000\n              enableAutoCommit \u003d true\n              autoCommitIntervalMs \u003d 1000\n              autoOffsetReset \u003d latest\n              sendStreamEvents \u003d true\n```\n- Java class `GerritConfigBuilder` would build the section with all the pieces in `gerrit.config`\n\n\u003e Configure the bootstrapServers via yaml (we can let the operator create Istio ServiceEntries for it to make it part of the ServiceMesh)\n\nDo we need this? I have been looking and for the Java class `ZookeeperRefDbConfig` and it is used only whenthe config file `zookeeper-refdb.config` is created by in the Java class `ZookeeperRefDbPluginConfigBuilder`. I think we should use the same approach unless that I am missing something.",
      "parentUuid": "5f0f3775_155d8122",
      "range": {
        "startLine": 201,
        "startChar": 0,
        "endLine": 202,
        "endChar": 96
      },
      "revId": "c4b65df0d9e13bd16026d686ae8def12ff805ab1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb62acde_097e9311",
        "filename": "operator/src/main/java/com/google/gerrit/k8s/operator/gerrit/config/GerritConfigBuilder.java",
        "patchSetId": 13
      },
      "lineNbr": 202,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2024-06-11T06:39:58Z",
      "side": 1,
      "message": "\u003e \u003e Configure the bootstrapServers via yaml (we can let the operator create Istio ServiceEntries for it to make it part of the ServiceMesh)\n\u003e Do we need this? I have been looking and for the Java class ZookeeperRefDbConfig and it is used only whenthe config file zookeeper-refdb.config is created by in the Java class ZookeeperRefDbPluginConfigBuilder. I think we should use the same approach unless that I am missing something.\n\nThis is not strictly necessary right now and also not implemented for zookeeper, but it helps with monitoring, e.g. it is shown as a workload in kiali. Also we already have in mind to use mTLS functionalities for increased security and maybe as an alternative for basic auth. For that external services need to be part of the mesh.\n\n\u003e Would it work for you (for this change, multisite will change slightly):\n\u003e We encode the bootstrapServers in GerritCluster CR in this way:\n\n```\neventsBroker:\n  brokerType: KAFKA\n  kafkaConfig:\n    connectString: kafka-service.kafka-zk.svc.cluster.local:9092\n```\n\u003e The gerrit.config section would contain:\n```\n          [plugin \"events-kafka\"]\n            securityProtocol \u003d PLAINTEXT\n            pollingIntervalMs \u003d 1000\n            enableAutoCommit \u003d true\n            autoCommitIntervalMs \u003d 1000\n            autoOffsetReset \u003d latest\n            sendStreamEvents \u003d true\n```\n\u003e Java class GerritConfigBuilder would build the section with all the pieces in gerrit.config\n\nYes, that sounds good. But only options that have a fixed/required value for the setup provided by the operator. Options like `pollingIntervalMs` that are used for optimization should be set by the user and otherwise rely on the default provided by the plugin. If in this case, because it is an option forwarded to Kafka, it has no default, we should either add a default to the plugin or we need to add a new construct similar to `RequiredOption`: `DefaultOption` that sets a default if the option wasn\u0027t set, but doesn\u0027t enforce a value.",
      "parentUuid": "4e8665fa_d1f1101d",
      "range": {
        "startLine": 201,
        "startChar": 0,
        "endLine": 202,
        "endChar": 96
      },
      "revId": "c4b65df0d9e13bd16026d686ae8def12ff805ab1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9c89ef5_9d56c83f",
        "filename": "operator/src/main/java/com/google/gerrit/k8s/operator/gerrit/config/GerritConfigBuilder.java",
        "patchSetId": 13
      },
      "lineNbr": 202,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2024-06-11T08:34:56Z",
      "side": 1,
      "message": "\u003e This is not strictly necessary right now and also not implemented for zookeeper, but it helps with monitoring, e.g. it is shown as a workload in kiali. Also we already have in mind to use mTLS functionalities for increased security and maybe as an alternative for basic auth. For that external services need to be part of the mesh.\n\nThat is interesting. Lets address this in another change. \n\n\u003e Yes, that sounds good. But only options that have a fixed/required value for the setup provided by the operator. Options like pollingIntervalMs that are used for optimization should be set by the user and otherwise rely on the default provided by the plugin. \n\nIt makes sense to me\n\n\u003e If in this case, because it is an option forwarded to Kafka, it has no default, we should either add a default to the plugin or we need to add a new construct similar to RequiredOption: DefaultOption that sets a default if the option wasn\u0027t set, but doesn\u0027t enforce a value.\n\nKafka defines it own defaults and I think we so follow the same approach as you suggested above. If user wants to change them they can do it in the `events-kafka` section.\n\nI have been checking the examples I provided and I found:\n\n\n```\nsecurityProtocol \u003d PLAINTEXT -\u003e kafka default value is PLAINTEXT -\u003e we can remove it\nenableAutoCommit \u003d true -\u003e kafka default value is true -\u003e we can remove it\nautoCommitIntervalMs \u003d 1000 -\u003e kafka default value is 5 secons -\u003e we can keep it\nautoOffsetReset \u003d latest -\u003e kafka default value is latest -\u003e we can remove it\nsendStreamEvents \u003d true -\u003e plugin default is false -\u003e we can keep it\npollingIntervalMs \u003d 1000 -\u003e plugin default is 1000 -\u003e we can remove it\n```\n\nSo the config would end up as:\n```\n          [plugin \"events-kafka\"]\n            autoCommitIntervalMs \u003d 100\n```\n\nAnd the Java class `GerritConfigBuilder ` would enforce `sendStreamEvents` to true.",
      "parentUuid": "cb62acde_097e9311",
      "range": {
        "startLine": 201,
        "startChar": 0,
        "endLine": 202,
        "endChar": 96
      },
      "revId": "c4b65df0d9e13bd16026d686ae8def12ff805ab1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a1735ea_0600410c",
        "filename": "operator/src/main/java/com/google/gerrit/k8s/operator/gerrit/config/GerritConfigBuilder.java",
        "patchSetId": 13
      },
      "lineNbr": 202,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2024-06-11T09:02:38Z",
      "side": 1,
      "message": "Agreed! Thanks!",
      "parentUuid": "e9c89ef5_9d56c83f",
      "range": {
        "startLine": 201,
        "startChar": 0,
        "endLine": 202,
        "endChar": 96
      },
      "revId": "c4b65df0d9e13bd16026d686ae8def12ff805ab1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41fad233_ce943245",
        "filename": "operator/src/main/java/com/google/gerrit/k8s/operator/gerrit/config/GerritConfigBuilder.java",
        "patchSetId": 13
      },
      "lineNbr": 202,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2024-06-11T16:16:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a1735ea_0600410c",
      "range": {
        "startLine": 201,
        "startChar": 0,
        "endLine": 202,
        "endChar": 96
      },
      "revId": "c4b65df0d9e13bd16026d686ae8def12ff805ab1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}